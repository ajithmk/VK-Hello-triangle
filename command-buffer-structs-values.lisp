(in-package #:pg3)

(defparameter *command-begin-info-value* '((:s-type (:command-buffer-begin-info)
						   :flags (*flags*)
						   :p-next ((null-pointer))
						   :p-inheritance-info (nil)
					    )))
						
(defparameter *submit-info-value* '((:s-type (:submit-info)
				     :p-next ((null-pointer))
				     :wait-semaphore-count (*wait-semaphore-count*)
				     :p-wait-semaphores ((*wait-semaphores*))
				     :p-wait-dst-stage-mask ((*wait-dst-stage-mask*))
				     :command-buffer-count (*command-buffer-count*)
				     :p-command-buffers ((*command-buffers*))
				     :signal-semaphore-count (*signal-semaphore-count*)
				     :p-signal-semaphores ((*signal-semaphores*))
				     )))
					 
(defparameter *present-info-value* '((:s-type (:present-info-khr)
					   :p-next ((null-pointer))
					   :wait-semaphore-count (*wait-semaphore-count*)
					   :p-wait-semaphores ((*wait-semaphores*))
					   :swapchain-count (1)
					   :p-swapchains ((*swapchains*))
					   :p-image-indices (*image-index*)
					   :p-results ((null-pointer))
					  )))
					  
(defparameter *command-buffer-allocate-info-value* '((:command-pool (*command-pool*)
						      :level (*level*)
						      :command-buffer-count (*command-buffer-count*)
						      :p-next ((null-pointer))
						      :s-type (:command-buffer-allocate-info)
						     )))
							 
(defparameter *render-pass-begin-info* '((:s-type (:render-pass-begin-info)
					  :render-pass (*render-pass*)
					  :p-next ((null-pointer))
					  :p-clear-values ( (:color (:float (0.0f0 0.0f0 0.0f0 0.0f0)))
							   )
					  :clear-value-count (1)
					  :framebuffer (*framebuffer*)
					  :render-area  (
							  (:offset ((
								     :x (0)
									:y (0)
									))
								   :extent ((
									     :width (*width*)
										    :height (*height*)
										    )))
							  )
					  )))