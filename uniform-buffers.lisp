(in-package #:pg3)

(defun create-descriptor-set-layout (device)
  (let ((*binding-count* 1)
	(*flags* nil))
    (with-foreign-object (p-desc-layout '%vk::descriptor-set-layout)
      (vk::awith-vk-structs (
			     (layout-create-info %vk::descriptor-set-layout-create-info  *desc-set-layout-create-info-value*))
	(%vk:create-descriptor-set-layout device layout-create-info (null-pointer) p-desc-layout)
	(let ((v nil))
	  (setf v (mem-ref p-desc-layout '%vk::descriptor-set-layout))
	  (unless (null-pointer-p v) v))))))

(defun create-descriptor-pool (device)
  (let ((*flags* nil))
  (with-foreign-object (pool '%vk::descriptor-pool)
    (vk::awith-vk-structs ((pool-info %vk:descriptor-pool-create-info *desc-pool-create-info-value*))
      (%vk:create-descriptor-pool device pool-info (null-pointer) pool)
      (let ((v nil))
	(setf v (mem-ref pool '%vk::descriptor-pool))
	(unless (null-pointer-p v) v))))))

(defun create-descriptor-sets (device desc-set-layout desc-pool)
  (let ((*descriptor-pool* desc-pool)
	(*descriptor-set-count* 2))
  (with-foreign-objects ((*p-set-layouts* '%vk::descriptor-set-layout 2)
			 (desc-sets '%vk::descriptor-set 2))
    (setf (mem-aref *p-set-layouts* '%vk::descriptor-set-layout 0) desc-set-layout)
    (setf (mem-aref *p-set-layouts* '%vk::descriptor-set-layout 1) desc-set-layout)
    (vk::awith-vk-structs ((alloc-info %vk::descriptor-set-allocate-info *desc-alloc-info*))
      (%vk:allocate-descriptor-sets device alloc-info desc-sets)
      (list (mem-aref desc-sets '%vk::descriptor-set 0) (mem-aref desc-sets '%vk::descriptor-set 1))))))

(defun update-descriptor-sets (device buffers desc-sets)
  (iter (for index from 0 below 2)
	(with *buffer-size* = 192)
	(with *buffer* = nil)
	(with *descriptor-set* = nil)
	(setf *buffer* (nth index buffers))
	(setf *descriptor-set* (nth index desc-sets))
	(vk::awith-vk-structs ((desc-write %vk::write-descriptor-set *write-desc-set*))
	  (%vk:update-descriptor-sets device 1 desc-write 0 (null-pointer)))))

(defun create-mvp-buffers (device)
  (let ((size 192))
    (push (create-buffer device '(:uniform-buffer) :exclusive size) *mvp-buffers*)
    (push (create-buffer device '(:uniform-buffer) :exclusive size) *mvp-buffers*)
    (store-resource "buffer" "mvp-buffer1" (first *mvp-buffers*))
    (store-resource "buffer" "mvp-buffer2" (second *mvp-buffers*))
    (push (allocate-memory (car *phy-devices*)
			   device
			   (first *mvp-buffers*)
			   '(:host-visible :host-coherent)) *mvp-memories*)
     (push (allocate-memory (car *phy-devices*)
			   device
			   (second *mvp-buffers*)
			   '(:host-visible :host-coherent)) *mvp-memories*)
     (store-resource "device-memory" "mvp-memory1" (first *mvp-memories*))
     (store-resource "device-memory" "mvp-memory2" (second *mvp-memories*))
     (%vk:bind-buffer-memory device (first *mvp-buffers*) (first *mvp-memories*) 0)
     (%vk:bind-buffer-memory device (second *mvp-buffers*) (second *mvp-memories*) 0)))
