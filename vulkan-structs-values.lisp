;;; vulkan-structs-values.lisp

(in-package #:pg3)

(defparameter *offset2d-value* '((:x (10) :y (20))))

(defparameter *buffer-create-info-value* '((:s-type (:buffer-create-info)
					    :p-next ((null-pointer))
					    :flags (0)
					    :size (*size*)
					    :usage (*buffer-usage-flags*)
					    :sharing-mode (*sharing-mode*)
					    :queue-family-index-count (0)
					    :p-queue-family-indices (nil)
					    )))

(defparameter *memory-allocate-info-value* '((:s-type (:memory-allocate-info)
					 :p-next ((null-pointer))
					 :allocation-size (*allocation-size*)
					 :memory-type-index (*memory-type-index*)
					)))

(defparameter *command-begin-info-value* '((:s-type (:command-buffer-begin-info)
						   :flags (0)
						   :p-next ((null-pointer))
						   :p-inheritance-info (nil)
					    )))

(defparameter *render-pass-begin-info* '((:s-type (:render-pass-begin-info)
					  :render-pass (*render-pass*)
					  :p-next ((null-pointer))
					  :p-clear-values ( (:color (:float (0.0f0 0.0f0 0.0f0 0.0f0)))
							   )
					  :clear-value-count (1)
					  :framebuffer (*framebuffer*)
					  :render-area  (
							  (:offset ((
								     :x (0)
									:y (0)
									))
								   :extent ((
									     :width (*width*)
										    :height (*height*)
										    )))
							  )
					  )))

(defparameter *command-buffer-allocate-info-value* '((:command-pool (*command-pool*)
						      :level (*level*)
						      :command-buffer-count (*command-buffer-count*)
						      :p-next ((null-pointer))
						      :s-type (:command-buffer-allocate-info)
						     )))

(defparameter *submit-info-value* '((:s-type (:submit-info)
				     :p-next ((null-pointer))
				     :wait-semaphore-count (*wait-semaphore-count*)
				     :p-wait-semaphores ((*wait-semaphores*))
				     :p-wait-dst-stage-mask ('(:color-attachment-output))
				     :command-buffer-count (*command-buffer-count*)
				     :p-command-buffers ((*command-buffers*))
				     :signal-semaphore-count (*signal-semaphore-count*)
				     :p-signal-semaphores ((*signal-semaphores*))
				     )))

(defparameter *present-info-value* '((:s-type (:present-info-khr)
					   :p-next ((null-pointer))
					   :wait-semaphore-count (*wait-semaphore-count*)
					   :p-wait-semaphores ((*wait-semaphores*))
					   :swapchain-count (1)
					   :p-swapchains ((*swapchains*))
					   :p-image-indices (*image-index*)
					   :p-results ((null-pointer))
					  )))

(defparameter *shader-module-value* ' ((:s-type (:shader-module-create-info)
						:p-next ((null-pointer))
						:flags (0)
						:code-size (*code-size*)
						:p-code (*code-pointer*)
						)))

(defparameter *framebuffer-info-value* '((:s-type (:framebuffer-create-info)
					  :p-next ((null-pointer))
					  :flags (0)
					  :render-pass (*render-pass*)
					  :attachment-count (1)
					  :p-attachments ((*attachments-pointer*))
					  :width (*width*)
					  :height (*height*)
					  :layers (1)
					 )))

(defparameter *render-pass-info-value* '((:s-type (:render-pass-create-info)
					  :p-next ((null-pointer))
					  :flags (0)
					  :attachment-count (1)
					  :p-attachments (((:flags (0)
								  :format (:b8g8r8a8-unorm)
								  :samples (:1)
								  :load-op (:clear)
								  :store-op (:store)
								  :stencil-load-op (:dont-care)
								  :stencil-store-op (:dont-care)
								  :initial-layout (:undefined)
								  :final-layout (:present-src-khr)
								  )))
					  :subpass-count (1)
					  :p-subpasses (((:flags (0)
								:pipeline-bind-point (:graphics)
								:input-attachment-count (0)
								:p-input-attachments (nil)
								:color-attachment-count (1)
								:p-color-attachments (((:attachment (0)
												   :layout (:color-attachment-optimal)
												   )))
								:p-resolve-attachments (nil)
								:p-depth-stencil-attachment (nil)
								:preserve-attachment-count (0)
								:p-preserve-attachments (nil)
								)))
					  :dependency-count (1)
					  :p-dependencies (((:src-subpass (4294967295)
									 :dst-subpass (0)
									 :src-access-mask (0)
									 :src-stage-mask ('(:color-attachment-output
											   ))
									 :dst-stage-mask ('(:color-attachment-output
											   ))
									 :dst-access-mask ('(:color-attachment-write
											    ))
							    
							   )))
					  )))

(defparameter *pipeline-layout-value* '((:s-type (:pipeline-layout-create-info)
					 :set-layout-count (0)
					 :flags (0)
					 :p-next ((null-pointer))
					 :p-set-layouts (((null-pointer)))
					 :push-constant-range-count (0)
					 :p-push-constant-ranges (nil)
					 )))

(defparameter *graphics-pipeline-value* ' ((:s-type (:graphics-pipeline-create-info)
					   :p-next ((null-pointer))
					   :flags (0)
					   :stage-count (2)
					   :p-stages ((
			(:s-type (:pipeline-shader-stage-create-info)
			:p-next ((null-pointer))
			:flags (0)
			:stage (:vertex)
			:module (*vertex-module*)
			:p-name ('(#\m #\a #\i #\n))
			:p-specialization-info (nil)))
			((:s-type (:pipeline-shader-stage-create-info)
			:p-next ((null-pointer))
			:flags (0)
			:stage (:fragment)
			:module (*fragment-module*)
			:p-name ('(#\m #\a #\i #\n))
			:p-specialization-info (nil))
					 ))
	:p-vertex-input-state ((
							(:s-type (:pipeline-vertex-input-state-create-info)
							:p-next ((null-pointer))
							:flags (0)
							:vertex-binding-description-count (0)
							:p-vertex-binding-descriptions (nil)
							:vertex-attribute-description-count (0)
							:p-vertex-attribute-descriptions (nil)
							)))
	:p-input-assembly-state ((
							(:s-type (:pipeline-input-assembly-state-create-info)
							:p-next ((null-pointer))
							:flags (0)
							:topology (:triangle-list)
							:primitive-restart-enable (nil))
							))
	:p-tessellation-state (nil)
	:p-viewport-state ((
						(:s-type (:pipeline-viewport-state-create-info)
						:p-next ((null-pointer))
						:flags (0)
						:viewport-count (1)
						:p-viewports ((
										(:x (0.0f0)
										:y (0.0f0)
										:width ((coerce *width*
												'single-float))
										:height ((coerce *height*
												 'single-float))
										:min-depth (0.0f0)
										:max-depth (1.0f0))
										))
						:scissor-count (1)
						:p-scissors ((
										(:offset ((
													:x (0)
													:y (0)
													))
										 :extent ((
											   :width (*width*)
												  :height (*height*)
													)))
									))
						)))
	:p-rasterization-state ((
							(:s-type (:pipeline-rasterization-state-create-info)
							:p-next ((null-pointer))
							:flags (0)
							:depth-clamp-enable (nil)
							:rasterizer-discard-enable (nil)
							:polygon-mode (:fill)
							:cull-mode (:back)
							:front-face (:clockwise)
							:depth-bias-enable (nil)
							:depth-bias-constant-factor (0.0f0)
							:depth-bias-clamp (0.0f0)
							:depth-bias-slope-factor (0.0f0)
							:line-width (1.0f0)
							)))
	:p-multisample-state  ((
							(:s-type (:pipeline-multisample-state-create-info)
							:p-next ((null-pointer))
							:flags (0)
							:rasterization-samples (:1)
							:sample-shading-enable (nil)
							:min-sample-shading (0.0f0)
							:p-sample-mask ((null-pointer))
							:alpha-to-coverage-enable ((null-pointer))
							:alpha-to-one-enable (nil)
							)))
	:p-depth-stencil-state (nil)
	:p-color-blend-state ((
						(:s-type (:pipeline-color-blend-state-create-info)
						:p-next ((null-pointer))
						:flags (0)
						:logic-op-enable (nil)
						:logic-op (:copy)
						:attachment-count (1)
						:p-attachments ((
										(:blend-enable (nil)
										:src-color-blend-factor (:one)
										:dst-color-blend-factor (:zero)
										:color-blend-op (:add)
										:src-alpha-blend-factor (:one)
										:dst-alpha-blend-factor (:zero)
										:alpha-blend-op (:add)
										:color-write-mask ('(:r :g :b :a))
										)))
						:blend-constants ('(0.0f0 0.0f0 0.0f0 0.0f0) nil nil 4)
							)))
	:p-dynamic-state (nil)
	:layout (*pipeline-layout*)
	:render-pass (*render-pass*)
	:subpass (0)
	:base-pipeline-handle ((null-pointer))
	:base-pipeline-index (-1))
  ))

(defparameter *graphics-value* ' ((:s-type (%vk:graphics-pipeline-create-info)
  :p-next (value)
  :flags (value)
  :stage-count (value)
  :p-stages ((
			(:s-type (%vk:pipeline-shader-stage-create-info)
			:p-next (value)
			:flags (value)
			:stage (value)
			:p-code (value)
			:p-name ((value))
			:p-specialization-info (nil)))
			((:s-type (%vk:pipeline-shader-stage-create-info)
			:p-next (value)
			:flags (value)
			:stage (value)
			:p-code (value)
			:p-name ((value))
			:p-specialization-info (nil))
					 ))
	:p-vertex-input-state ((
							(:s-type (%vk:pipeline-vertex-input-state-create-info)
							:p-next (value)
							:flags (value)
							:vertex-binding-description-count (value)
							:p-vertex-binding-descriptions (((
															:binding (value)
															:stride (value)
															:input-rate (value))
															))
							:vertex-attribute-description-count (value)
							:p-vertex-attribute-descriptions ((
															(:location (value)
															:binding (value)
															:format (value)
															:offset (value))
															))
							)))
	:p-input-assembly-state ((
							(:s-type (%vk:pipeline-input-assembly-state-create-info)
							:p-next (value)
							:flags (value)
							:topology (value)
							:primitive-restart-enable (value))
							))
	:p-tessellation-state ((
							(:s-type (%vkpipeline-tessellation-state-create-info)
							:p-next (value)
							:flags (value)
							:patch-control-points (value))
							))
	:p-viewport-state ((
						(:s-type (%vk:pipeline-viewport-state-create-info)
						:p-next (value)
						:flags (value)
						:viewport-count (value)
						:p-viewports ((
										((:x value)
										(:y value)
										(:width value)
										(:height value)
										(:min-depth value)
										(:max-depth value))
										))
						:scissor-count (value)
						:p-scissors ((
										(:offset ((
													:x (value)
													:y (value)
													))
										:extent ((
													:width (value)
													:height (value)
													)))
									))
						)))
	:p-rasterization-state ((
							(:s-type (%vk:pipeline-rasterization-state-create-info)
							:p-next (value)
							:flags (value)
							:depth-clamp-enable (value)
							:rasterizer-discard-enable (value)
							:polygon-mode (value)
							:cull-mode (value)
							:front-face (value)
							:depth-bias-enable (value)
							:depth-bias-constant-factor (value)
							:depth-bias-clamp (value)
							:depth-bias-slope-factor (value)
							:line-width (value)
							)))
	:p-multisample-state  ((
							(:s-type (%vk:pipeline-multisample-state-create-info)
							:p-next (value)
							:flags (value)
							:rasterization-samples (value)
							:sample-shading-enable (value)
							:min-sample-shading (value)
							:p-sample-mask (value)
							:alpha-to-coverage-enable (value)
							:alpha-to-one-enable (value)
							)))
	:p-depth-stencil-state ((
							(:s-type (%vk:pipeline-depth-stencil-state-create-info)
							:p-next (value )
							:flags (value)
							:depth-test-enable (value)
							:depth-write-enable (value)
							:depth-compare-op (value)
							:depth-bounds-test-enable (value)
							:stencil-test-enable (value)
							:front ((
									:fail-op (value)
									:pass-op (value)
									:depth-fail-op (value)
									:compare-op (value)
									:compare-mask (value)
									:write-mask (value)
									:reference (value)
									))
							:back ((
									:fail-op (value)
									:pass-op (value)
									:depth-fail-op (value)
									:compare-op (value)
									:compare-mask (value)
									:write-mask (value)
									:reference (value)
									))
							:min-depth-bounds (value)
							:max-depth-bounds (value)
							)))
	:p-color-blend-state ((
						(:s-type (%vk:pipeline-color-blend-state-create-info)
						:p-next (value)
						:flags (value)
						:logic-op-enable (value)
						:logic-op (value)
						:attachment-count (value)
						:p-attachments ((
										(:blend-enable (value)
										:src-color-blend-factor (value)
										:dst-color-blend-factor (value)
										:color-blend-op (value)
										:src-alpha-blend-factor (value)
										:dst-alpha-blend-factor (value)
										:alpha-blend-op (value)
										:color-write-mask (value)
										)))
						:blend-constants (value nil nil 4)
							)))
	:p-dynamic-state ((
						(:s-type (%vk:pipeline-dynamic-state-create-info)
						:p-next (value)
						:flags (value)
						:dynamic-state-count (value)
						:p-dynamic-states (value)
						)))
	:layout (value)
	:render-pass (value)
	:subpass (value)
	:base-pipeline-handle (value)
	:base-pipeline-index (value))
  ))


(defparameter *render-pass-begin-info1* '((:s-type (:render-pass-begin-info)
					  :render-pass (*render-pass*)
					  :p-next ((null-pointer))
					  :p-clear-values ( (:color (color-type '(c* c* c* c*)))
							   (:clear-depth-stencil-value (:depth (d* d* d* d*) :stencil (s* s* s* s*)))
							   )
					  :clear-value-count (1)
					  :framebuffer (*framebuffer*)
					  :render-area  (
							  (:offset ((
								     :x (0)
									:y (0)
									))
								   :extent ((
									     :width (1920)
										    :height (1060)
										    )))
							  )
					  )))
