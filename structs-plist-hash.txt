(setf (gethash :acquire-next-image-info-khx *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:swapchain :type swapchain-khr :opaque t)
(:timeout :type :uint64)
(:semaphore :type semaphore :opaque t :optional t)
(:fence :type fence :opaque t :optional t)
(:device-mask :type :uint32)
))
(setf (gethash :android-surface-create-info-khr *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:flags :type android-surface-create-flags-khr :optional t)
(:window :type (:pointer a-native-window)  :opaque t)
))
(setf (gethash :attachment-description *structs-plist-hash*) '(
(:flags :type attachment-description-flags :optional t)
(:format :type format)
(:samples :type sample-count-flag-bits)
(:load-op :type attachment-load-op)
(:store-op :type attachment-store-op)
(:stencil-load-op :type attachment-load-op)
(:stencil-store-op :type attachment-store-op)
(:initial-layout :type image-layout)
(:final-layout :type image-layout)
))
(setf (gethash :bind-buffer-memory-info-khx *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:buffer :type buffer :opaque t)
(:memory :type device-memory :opaque t)
(:memory-offset :type device-size)
(:device-index-count :type :uint32 :optional t)
(:p-device-indices :type (:pointer :uint32) )
))
(setf (gethash :bind-image-memory-swapchain-info-khx *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:swapchain :type swapchain-khr :opaque t)
(:image-index :type :uint32)
))
(setf (gethash :buffer-copy *structs-plist-hash*) '(
(:src-offset :type device-size)
(:dst-offset :type device-size)
(:size :type device-size)
))
(setf (gethash :buffer-image-copy *structs-plist-hash*) '(
(:buffer-offset :type device-size)
(:buffer-row-length :type :uint32)
(:buffer-image-height :type :uint32)
(:image-subresource :type (:struct image-subresource-layers) )
(:image-offset :type (:struct offset-3d) )
(:image-extent :type (:struct extent-3d) )
))
(setf (gethash :buffer-view-create-info *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:flags :type buffer-view-create-flags :optional t)
(:buffer :type buffer :opaque t)
(:format :type format)
(:offset :type device-size)
(:range :type device-size)
))
(setf (gethash :clear-color-value *structs-plist-hash*) '(
(:float-32 :type :float)
(:int-32 :type :int32)
(:uint-32 :type :uint32)
))
(setf (gethash :clear-rect *structs-plist-hash*) '(
(:rect :type (:struct rect-2d) )
(:base-array-layer :type :uint32)
(:layer-count :type :uint32)
))
(setf (gethash :cmd-process-commands-info-nvx *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:object-table :type object-table-nvx :opaque t)
(:indirect-commands-layout :type indirect-commands-layout-nvx :opaque t)
(:indirect-commands-token-count :type :uint32)
(:p-indirect-commands-tokens :type (:pointer (:struct indirect-commands-token-nvx)) )
(:max-sequences-count :type :uint32)
(:target-command-buffer :type command-buffer :opaque t :optional t)
(:sequences-count-buffer :type buffer :opaque t :optional t)
(:sequences-count-offset :type device-size :optional t)
(:sequences-index-buffer :type buffer :opaque t :optional t)
(:sequences-index-offset :type device-size :optional t)
))
(setf (gethash :command-buffer-allocate-info *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:command-pool :type command-pool :opaque t)
(:level :type command-buffer-level)
(:command-buffer-count :type :uint32)
))
(setf (gethash :command-buffer-inheritance-info *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:render-pass :type render-pass :opaque t :optional t)
(:subpass :type :uint32)
(:framebuffer :type framebuffer :opaque t :optional t)
(:occlusion-query-enable :type bool32)
(:query-flags :type query-control-flags :optional t)
(:pipeline-statistics :type query-pipeline-statistic-flags :optional t)
))
(setf (gethash :component-mapping *structs-plist-hash*) '(
(:r :type component-swizzle)
(:g :type component-swizzle)
(:b :type component-swizzle)
(:a :type component-swizzle)
))
(setf (gethash :copy-descriptor-set *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:src-set :type descriptor-set :opaque t)
(:src-binding :type :uint32)
(:src-array-element :type :uint32)
(:dst-set :type descriptor-set :opaque t)
(:dst-binding :type :uint32)
(:dst-array-element :type :uint32)
(:descriptor-count :type :uint32)
))
(setf (gethash :debug-marker-marker-info-ext *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:p-marker-name :type (:pointer :char) )
(:color :type :float :optional t)
))
(setf (gethash :debug-marker-object-tag-info-ext *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:object-type :type debug-report-object-type-ext)
(:object :type :uint64)
(:tag-name :type :uint64)
(:tag-size :type size-t)
(:p-tag :type (:pointer :void)  :opaque t)
))
(setf (gethash :dedicated-allocation-buffer-create-info-nv *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:dedicated-allocation :type bool32)
))
(setf (gethash :dedicated-allocation-memory-allocate-info-nv *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:image :type image :opaque t :optional t)
(:buffer :type buffer :opaque t :optional t)
))
(setf (gethash :descriptor-image-info *structs-plist-hash*) '(
(:sampler :type sampler :opaque t)
(:image-view :type image-view :opaque t)
(:image-layout :type image-layout)
))
(setf (gethash :descriptor-pool-size *structs-plist-hash*) '(
(:type :type descriptor-type)
(:descriptor-count :type :uint32)
))
(setf (gethash :descriptor-set-layout-binding *structs-plist-hash*) '(
(:binding :type :uint32)
(:descriptor-type :type descriptor-type)
(:descriptor-count :type :uint32 :optional t)
(:stage-flags :type shader-stage-flags)
(:p-immutable-samplers :type (:pointer sampler)  :opaque t :optional t)
))
(setf (gethash :descriptor-update-template-create-info-khr *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:flags :type descriptor-update-template-create-flags-khr :optional t)
(:descriptor-update-entry-count :type :uint32)
(:p-descriptor-update-entries :type (:pointer (:struct descriptor-update-template-entry-khr)) )
(:template-type :type descriptor-update-template-type-khr)
(:descriptor-set-layout :type descriptor-set-layout :opaque t :optional t)
(:pipeline-bind-point :type pipeline-bind-point :optional t)
(:pipeline-layout :type pipeline-layout :opaque t :optional t)
(:set :type :uint32 :optional t)
))
(setf (gethash :device-create-info *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:flags :type device-create-flags :optional t)
(:queue-create-info-count :type :uint32)
(:p-queue-create-infos :type (:pointer (:struct device-queue-create-info)) )
(:enabled-layer-count :type :uint32 :optional t)
(:pp-enabled-layer-names :type (:pointer (:pointer :char)) )
(:enabled-extension-count :type :uint32 :optional t)
(:pp-enabled-extension-names :type (:pointer (:pointer :char)) )
(:p-enabled-features :type (:pointer (:struct physical-device-features))  :optional t)
))
(setf (gethash :device-generated-commands-features-nvx *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:compute-binding-point-support :type bool32)
))
(setf (gethash :device-group-bind-sparse-info-khx *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:resource-device-index :type :uint32)
(:memory-device-index :type :uint32)
))
(setf (gethash :device-group-device-create-info-khx *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:physical-device-count :type :uint32 :optional t)
(:p-physical-devices :type (:pointer physical-device)  :opaque t)
))
(setf (gethash :device-group-present-info-khx *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:swapchain-count :type :uint32 :optional t)
(:p-device-masks :type (:pointer :uint32) )
(:mode :type device-group-present-mode-flag-bits-khx)
))
(setf (gethash :device-group-submit-info-khx *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:wait-semaphore-count :type :uint32 :optional t)
(:p-wait-semaphore-device-indices :type (:pointer :uint32) )
(:command-buffer-count :type :uint32 :optional t)
(:p-command-buffer-device-masks :type (:pointer :uint32) )
(:signal-semaphore-count :type :uint32 :optional t)
(:p-signal-semaphore-device-indices :type (:pointer :uint32) )
))
(setf (gethash :device-queue-create-info *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:flags :type device-queue-create-flags :optional t)
(:queue-family-index :type :uint32)
(:queue-count :type :uint32)
(:p-queue-priorities :type (:pointer :float) )
))
(setf (gethash :display-event-info-ext *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:display-event :type display-event-type-ext)
))
(setf (gethash :display-mode-parameters-khr *structs-plist-hash*) '(
(:visible-region :type (:struct extent-2d) )
(:refresh-rate :type :uint32)
))
(setf (gethash :display-plane-capabilities-khr *structs-plist-hash*) '(
(:supported-alpha :type display-plane-alpha-flags-khr :optional t)
(:min-src-position :type (:struct offset-2d) )
(:max-src-position :type (:struct offset-2d) )
(:min-src-extent :type (:struct extent-2d) )
(:max-src-extent :type (:struct extent-2d) )
(:min-dst-position :type (:struct offset-2d) )
(:max-dst-position :type (:struct offset-2d) )
(:min-dst-extent :type (:struct extent-2d) )
(:max-dst-extent :type (:struct extent-2d) )
))
(setf (gethash :display-power-info-ext *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:power-state :type display-power-state-ext)
))
(setf (gethash :display-properties-khr *structs-plist-hash*) '(
(:display :type display-khr :opaque t)
(:display-name :type :string)
(:physical-dimensions :type (:struct extent-2d) )
(:physical-resolution :type (:struct extent-2d) )
(:supported-transforms :type surface-transform-flags-khr :optional t)
(:plane-reorder-possible :type bool32)
(:persistent-content :type bool32)
))
(setf (gethash :draw-indexed-indirect-command *structs-plist-hash*) '(
(:index-count :type :uint32)
(:instance-count :type :uint32)
(:first-index :type :uint32)
(:vertex-offset :type :int32)
(:first-instance :type :uint32)
))
(setf (gethash :event-create-info *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:flags :type event-create-flags :optional t)
))
(setf (gethash :export-memory-allocate-info-nv *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:handle-types :type external-memory-handle-type-flags-nv :optional t)
))
(setf (gethash :export-memory-win32-handle-info-nv *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:p-attributes :type (:pointer security_attributes)  :opaque t :optional t)
(:dw-access :type dword :optional t)
))
(setf (gethash :export-semaphore-win32-handle-info-khx *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:p-attributes :type (:pointer security_attributes)  :opaque t :optional t)
(:dw-access :type dword)
(:name :type lpcwstr)
))
(setf (gethash :extent-2d *structs-plist-hash*) '(
(:width :type :uint32)
(:height :type :uint32)
))
(setf (gethash :external-buffer-properties-khx *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:external-memory-properties :type (:struct external-memory-properties-khx) )
))
(setf (gethash :external-image-format-properties-nv *structs-plist-hash*) '(
(:image-format-properties :type (:struct image-format-properties) )
(:external-memory-features :type external-memory-feature-flags-nv :optional t)
(:export-from-imported-handle-types :type external-memory-handle-type-flags-nv :optional t)
(:compatible-handle-types :type external-memory-handle-type-flags-nv :optional t)
))
(setf (gethash :external-memory-image-create-info-khx *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:handle-types :type external-memory-handle-type-flags-khx)
))
(setf (gethash :external-memory-properties-khx *structs-plist-hash*) '(
(:external-memory-features :type external-memory-feature-flags-khx)
(:export-from-imported-handle-types :type external-memory-handle-type-flags-khx :optional t)
(:compatible-handle-types :type external-memory-handle-type-flags-khx)
))
(setf (gethash :fence-create-info *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:flags :type fence-create-flags :optional t)
))
(setf (gethash :format-properties-2-khr *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:format-properties :type (:struct format-properties) )
))
(setf (gethash :graphics-pipeline-create-info *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:flags :type pipeline-create-flags :optional t)
(:stage-count :type :uint32)
(:p-stages :type (:pointer (:struct pipeline-shader-stage-create-info)) )
(:p-vertex-input-state :type (:pointer (:struct pipeline-vertex-input-state-create-info)) )
(:p-input-assembly-state :type (:pointer (:struct pipeline-input-assembly-state-create-info)) )
(:p-tessellation-state :type (:pointer (:struct pipeline-tessellation-state-create-info))  :optional t)
(:p-viewport-state :type (:pointer (:struct pipeline-viewport-state-create-info))  :optional t)
(:p-rasterization-state :type (:pointer (:struct pipeline-rasterization-state-create-info)) )
(:p-multisample-state :type (:pointer (:struct pipeline-multisample-state-create-info))  :optional t)
(:p-depth-stencil-state :type (:pointer (:struct pipeline-depth-stencil-state-create-info))  :optional t)
(:p-color-blend-state :type (:pointer (:struct pipeline-color-blend-state-create-info))  :optional t)
(:p-dynamic-state :type (:pointer (:struct pipeline-dynamic-state-create-info))  :optional t)
(:layout :type pipeline-layout :opaque t)
(:render-pass :type render-pass :opaque t)
(:subpass :type :uint32)
(:base-pipeline-handle :type pipeline :opaque t :optional t)
(:base-pipeline-index :type :int32)
))
(setf (gethash :i-o-s-surface-create-info-mvk *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:flags :type i-o-s-surface-create-flags-mvk :optional t)
(:p-view :type (:pointer :void)  :opaque t)
))
(setf (gethash :image-copy *structs-plist-hash*) '(
(:src-subresource :type (:struct image-subresource-layers) )
(:src-offset :type (:struct offset-3d) )
(:dst-subresource :type (:struct image-subresource-layers) )
(:dst-offset :type (:struct offset-3d) )
(:extent :type (:struct extent-3d) )
))
(setf (gethash :image-format-properties *structs-plist-hash*) '(
(:max-extent :type (:struct extent-3d) )
(:max-mip-levels :type :uint32)
(:max-array-layers :type :uint32)
(:sample-counts :type sample-count-flags :optional t)
(:max-resource-size :type device-size)
))
(setf (gethash :image-memory-barrier *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:src-access-mask :type access-flags :optional t)
(:dst-access-mask :type access-flags :optional t)
(:old-layout :type image-layout)
(:new-layout :type image-layout)
(:src-queue-family-index :type :uint32)
(:dst-queue-family-index :type :uint32)
(:image :type image :opaque t)
(:subresource-range :type (:struct image-subresource-range) )
))
(setf (gethash :image-subresource *structs-plist-hash*) '(
(:aspect-mask :type image-aspect-flags)
(:mip-level :type :uint32)
(:array-layer :type :uint32)
))
(setf (gethash :image-subresource-range *structs-plist-hash*) '(
(:aspect-mask :type image-aspect-flags)
(:base-mip-level :type :uint32)
(:level-count :type :uint32)
(:base-array-layer :type :uint32)
(:layer-count :type :uint32)
))
(setf (gethash :image-view-create-info *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:flags :type image-view-create-flags :optional t)
(:image :type image :opaque t)
(:view-type :type image-view-type)
(:format :type format)
(:components :type (:struct component-mapping) )
(:subresource-range :type (:struct image-subresource-range) )
))
(setf (gethash :import-memory-win32-handle-info-khx *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:handle-type :type external-memory-handle-type-flag-bits-khx :optional t)
(:handle :type handle)
))
(setf (gethash :import-semaphore-fd-info-khx *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:semaphore :type semaphore :opaque t)
(:handle-type :type external-semaphore-handle-type-flag-bits-khx)
(:fd :type :int)
))
(setf (gethash :indirect-commands-layout-create-info-nvx *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:pipeline-bind-point :type pipeline-bind-point)
(:flags :type indirect-commands-layout-usage-flags-nvx)
(:token-count :type :uint32)
(:p-tokens :type (:pointer (:struct indirect-commands-layout-token-nvx)) )
))
(setf (gethash :indirect-commands-token-nvx *structs-plist-hash*) '(
(:token-type :type indirect-commands-token-type-nvx)
(:buffer :type buffer :opaque t)
(:offset :type device-size)
))
(setf (gethash :layer-properties *structs-plist-hash*) '(
(:layer-name :type :char)
(:spec-version :type :uint32)
(:implementation-version :type :uint32)
(:description :type :char)
))
(setf (gethash :mapped-memory-range *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:memory :type device-memory :opaque t)
(:offset :type device-size)
(:size :type device-size)
))
(setf (gethash :memory-allocate-info *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:allocation-size :type device-size)
(:memory-type-index :type :uint32)
))
(setf (gethash :memory-fd-properties-khx *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:memory-type-bits :type :uint32)
))
(setf (gethash :memory-requirements *structs-plist-hash*) '(
(:size :type device-size)
(:alignment :type device-size)
(:memory-type-bits :type :uint32)
))
(setf (gethash :memory-win32-handle-properties-khx *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:memory-type-bits :type :uint32)
))
(setf (gethash :object-table-create-info-nvx *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:object-count :type :uint32)
(:p-object-entry-types :type (:pointer object-entry-type-nvx) )
(:p-object-entry-counts :type (:pointer :uint32) )
(:p-object-entry-usage-flags :type (:pointer object-entry-usage-flags-nvx) )
(:max-uniform-buffers-per-descriptor :type :uint32)
(:max-storage-buffers-per-descriptor :type :uint32)
(:max-storage-images-per-descriptor :type :uint32)
(:max-sampled-images-per-descriptor :type :uint32)
(:max-pipeline-layouts :type :uint32)
))
(setf (gethash :object-table-entry-nvx *structs-plist-hash*) '(
(:type :type object-entry-type-nvx)
(:flags :type object-entry-usage-flags-nvx)
))
(setf (gethash :object-table-pipeline-entry-nvx *structs-plist-hash*) '(
(:type :type object-entry-type-nvx)
(:flags :type object-entry-usage-flags-nvx)
(:pipeline :type pipeline :opaque t)
))
(setf (gethash :object-table-vertex-buffer-entry-nvx *structs-plist-hash*) '(
(:type :type object-entry-type-nvx)
(:flags :type object-entry-usage-flags-nvx)
(:buffer :type buffer :opaque t)
))
(setf (gethash :offset-3d *structs-plist-hash*) '(
(:x :type :int32)
(:y :type :int32)
(:z :type :int32)
))
(setf (gethash :physical-device-discard-rectangle-properties-ext *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:max-discard-rectangles :type :uint32)
))
(setf (gethash :physical-device-external-image-format-info-khx *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:handle-type :type external-memory-handle-type-flag-bits-khx :optional t)
))
(setf (gethash :physical-device-features *structs-plist-hash*) '(
(:robust-buffer-access :type bool32)
(:full-draw-index-uint-32 :type bool32)
(:image-cube-array :type bool32)
(:independent-blend :type bool32)
(:geometry-shader :type bool32)
(:tessellation-shader :type bool32)
(:sample-rate-shading :type bool32)
(:dual-src-blend :type bool32)
(:logic-op :type bool32)
(:multi-draw-indirect :type bool32)
(:draw-indirect-first-instance :type bool32)
(:depth-clamp :type bool32)
(:depth-bias-clamp :type bool32)
(:fill-mode-non-solid :type bool32)
(:depth-bounds :type bool32)
(:wide-lines :type bool32)
(:large-points :type bool32)
(:alpha-to-one :type bool32)
(:multi-viewport :type bool32)
(:sampler-anisotropy :type bool32)
(:texture-compression-etc2 :type bool32)
(:texture-compression-astc_-ldr :type bool32)
(:texture-compression-bc :type bool32)
(:occlusion-query-precise :type bool32)
(:pipeline-statistics-query :type bool32)
(:vertex-pipeline-stores-and-atomics :type bool32)
(:fragment-stores-and-atomics :type bool32)
(:shader-tessellation-and-geometry-point-size :type bool32)
(:shader-image-gather-extended :type bool32)
(:shader-storage-image-extended-formats :type bool32)
(:shader-storage-image-multisample :type bool32)
(:shader-storage-image-read-without-format :type bool32)
(:shader-storage-image-write-without-format :type bool32)
(:shader-uniform-buffer-array-dynamic-indexing :type bool32)
(:shader-sampled-image-array-dynamic-indexing :type bool32)
(:shader-storage-buffer-array-dynamic-indexing :type bool32)
(:shader-storage-image-array-dynamic-indexing :type bool32)
(:shader-clip-distance :type bool32)
(:shader-cull-distance :type bool32)
(:shader-float-64 :type bool32)
(:shader-int-64 :type bool32)
(:shader-int-16 :type bool32)
(:shader-resource-residency :type bool32)
(:shader-resource-min-lod :type bool32)
(:sparse-binding :type bool32)
(:sparse-residency-buffer :type bool32)
(:sparse-residency-image-2d :type bool32)
(:sparse-residency-image-3d :type bool32)
(:sparse-residency-2-samples :type bool32)
(:sparse-residency-4-samples :type bool32)
(:sparse-residency-8-samples :type bool32)
(:sparse-residency-16-samples :type bool32)
(:sparse-residency-aliased :type bool32)
(:variable-multisample-rate :type bool32)
(:inherited-queries :type bool32)
))
(setf (gethash :physical-device-group-properties-khx *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:physical-device-count :type :uint32)
(:physical-devices :type physical-device :opaque t)
(:subset-allocation :type bool32)
))
(setf (gethash :physical-device-image-format-info-2-khr *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:format :type format)
(:type :type image-type)
(:tiling :type image-tiling)
(:usage :type image-usage-flags)
(:flags :type image-create-flags :optional t)
))
(setf (gethash :physical-device-memory-properties *structs-plist-hash*) '(
(:memory-type-count :type :uint32)
(:memory-types :type (:struct memory-type) )
(:memory-heap-count :type :uint32)
(:memory-heaps :type (:struct memory-heap) )
))
(setf (gethash :physical-device-multiview-features-khx *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:multiview :type bool32)
(:multiview-geometry-shader :type bool32)
(:multiview-tessellation-shader :type bool32)
))
(setf (gethash :physical-device-multiview-properties-khx *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:max-multiview-view-count :type :uint32)
(:max-multiview-instance-index :type :uint32)
))
(setf (gethash :physical-device-properties-2-khr *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:properties :type (:struct physical-device-properties) )
))
(setf (gethash :physical-device-sparse-image-format-info-2-khr *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:format :type format)
(:type :type image-type)
(:samples :type sample-count-flag-bits)
(:usage :type image-usage-flags)
(:tiling :type image-tiling)
))
(setf (gethash :physical-device-surface-info-2-khr *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:surface :type surface-khr :opaque t)
))
(setf (gethash :pipeline-color-blend-attachment-state *structs-plist-hash*) '(
(:blend-enable :type bool32)
(:src-color-blend-factor :type blend-factor)
(:dst-color-blend-factor :type blend-factor)
(:color-blend-op :type blend-op)
(:src-alpha-blend-factor :type blend-factor)
(:dst-alpha-blend-factor :type blend-factor)
(:alpha-blend-op :type blend-op)
(:color-write-mask :type color-component-flags :optional t)
))
(setf (gethash :pipeline-depth-stencil-state-create-info *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:flags :type pipeline-depth-stencil-state-create-flags :optional t)
(:depth-test-enable :type bool32)
(:depth-write-enable :type bool32)
(:depth-compare-op :type compare-op)
(:depth-bounds-test-enable :type bool32)
(:stencil-test-enable :type bool32)
(:front :type (:struct stencil-op-state) )
(:back :type (:struct stencil-op-state) )
(:min-depth-bounds :type :float)
(:max-depth-bounds :type :float)
))
(setf (gethash :pipeline-dynamic-state-create-info *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:flags :type pipeline-dynamic-state-create-flags :optional t)
(:dynamic-state-count :type :uint32)
(:p-dynamic-states :type (:pointer dynamic-state) )
))
(setf (gethash :pipeline-layout-create-info *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:flags :type pipeline-layout-create-flags :optional t)
(:set-layout-count :type :uint32 :optional t)
(:p-set-layouts :type (:pointer descriptor-set-layout)  :opaque t)
(:push-constant-range-count :type :uint32 :optional t)
(:p-push-constant-ranges :type (:pointer (:struct push-constant-range)) )
))
(setf (gethash :pipeline-rasterization-state-create-info *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:flags :type pipeline-rasterization-state-create-flags :optional t)
(:depth-clamp-enable :type bool32)
(:rasterizer-discard-enable :type bool32)
(:polygon-mode :type polygon-mode)
(:cull-mode :type cull-mode-flags :optional t)
(:front-face :type front-face)
(:depth-bias-enable :type bool32)
(:depth-bias-constant-factor :type :float)
(:depth-bias-clamp :type :float)
(:depth-bias-slope-factor :type :float)
(:line-width :type :float)
))
(setf (gethash :pipeline-shader-stage-create-info *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:flags :type pipeline-shader-stage-create-flags :optional t)
(:stage :type shader-stage-flag-bits)
(:module :type shader-module :opaque t)
(:p-name :type (:pointer :char) )
(:p-specialization-info :type (:pointer (:struct specialization-info))  :optional t)
))
(setf (gethash :pipeline-vertex-input-state-create-info *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:flags :type pipeline-vertex-input-state-create-flags :optional t)
(:vertex-binding-description-count :type :uint32 :optional t)
(:p-vertex-binding-descriptions :type (:pointer (:struct vertex-input-binding-description)) )
(:vertex-attribute-description-count :type :uint32 :optional t)
(:p-vertex-attribute-descriptions :type (:pointer (:struct vertex-input-attribute-description)) )
))
(setf (gethash :pipeline-viewport-swizzle-state-create-info-nv *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:flags :type pipeline-viewport-swizzle-state-create-flags-nv :optional t)
(:viewport-count :type :uint32)
(:p-viewport-swizzles :type (:pointer (:struct viewport-swizzle-nv))  :optional t)
))
(setf (gethash :present-info-khr *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:wait-semaphore-count :type :uint32 :optional t)
(:p-wait-semaphores :type (:pointer semaphore)  :opaque t :optional t)
(:swapchain-count :type :uint32)
(:p-swapchains :type (:pointer swapchain-khr)  :opaque t)
(:p-image-indices :type (:pointer :uint32) )
(:p-results :type (:pointer result)  :optional t)
))
(setf (gethash :present-regions-khr *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:swapchain-count :type :uint32)
(:p-regions :type (:pointer (:struct present-region-khr))  :optional t)
))
(setf (gethash :present-times-info-google *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:swapchain-count :type :uint32)
(:p-times :type (:pointer (:struct present-time-google))  :optional t)
))
(setf (gethash :query-pool-create-info *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:flags :type query-pool-create-flags :optional t)
(:query-type :type query-type)
(:query-count :type :uint32)
(:pipeline-statistics :type query-pipeline-statistic-flags :optional t)
))
(setf (gethash :queue-family-properties-2-khr *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:queue-family-properties :type (:struct queue-family-properties) )
))
(setf (gethash :rect-3d *structs-plist-hash*) '(
(:offset :type (:struct offset-3d) )
(:extent :type (:struct extent-3d) )
))
(setf (gethash :refresh-cycle-duration-google *structs-plist-hash*) '(
(:refresh-duration :type :uint64)
))
(setf (gethash :render-pass-create-info *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:flags :type render-pass-create-flags :optional t)
(:attachment-count :type :uint32 :optional t)
(:p-attachments :type (:pointer (:struct attachment-description)) )
(:subpass-count :type :uint32)
(:p-subpasses :type (:pointer (:struct subpass-description)) )
(:dependency-count :type :uint32 :optional t)
(:p-dependencies :type (:pointer (:struct subpass-dependency)) )
))
(setf (gethash :sampler-create-info *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:flags :type sampler-create-flags :optional t)
(:mag-filter :type filter)
(:min-filter :type filter)
(:mipmap-mode :type sampler-mipmap-mode)
(:address-mode-u :type sampler-address-mode)
(:address-mode-v :type sampler-address-mode)
(:address-mode-w :type sampler-address-mode)
(:mip-lod-bias :type :float)
(:anisotropy-enable :type bool32)
(:max-anisotropy :type :float)
(:compare-enable :type bool32)
(:compare-op :type compare-op)
(:min-lod :type :float)
(:max-lod :type :float)
(:border-color :type border-color)
(:unnormalized-coordinates :type bool32)
))
(setf (gethash :shader-module-create-info *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:flags :type shader-module-create-flags :optional t)
(:code-size :type size-t)
(:p-code :type (:pointer :uint8) )
))
(setf (gethash :sparse-buffer-memory-bind-info *structs-plist-hash*) '(
(:buffer :type buffer :opaque t)
(:bind-count :type :uint32)
(:p-binds :type (:pointer (:struct sparse-memory-bind)) )
))
(setf (gethash :sparse-image-format-properties-2-khr *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:properties :type (:struct sparse-image-format-properties) )
))
(setf (gethash :sparse-image-memory-bind-info *structs-plist-hash*) '(
(:image :type image :opaque t)
(:bind-count :type :uint32)
(:p-binds :type (:pointer (:struct sparse-image-memory-bind)) )
))
(setf (gethash :sparse-image-opaque-memory-bind-info *structs-plist-hash*) '(
(:image :type image :opaque t)
(:bind-count :type :uint32)
(:p-binds :type (:pointer (:struct sparse-memory-bind)) )
))
(setf (gethash :specialization-info *structs-plist-hash*) '(
(:map-entry-count :type :uint32 :optional t)
(:p-map-entries :type (:pointer (:struct specialization-map-entry)) )
(:data-size :type size-t :optional t)
(:p-data :type (:pointer :void)  :opaque t)
))
(setf (gethash :stencil-op-state *structs-plist-hash*) '(
(:fail-op :type stencil-op)
(:pass-op :type stencil-op)
(:depth-fail-op :type stencil-op)
(:compare-op :type compare-op)
(:compare-mask :type :uint32)
(:write-mask :type :uint32)
(:reference :type :uint32)
))
(setf (gethash :subpass-dependency *structs-plist-hash*) '(
(:src-subpass :type :uint32)
(:dst-subpass :type :uint32)
(:src-stage-mask :type pipeline-stage-flags)
(:dst-stage-mask :type pipeline-stage-flags)
(:src-access-mask :type access-flags :optional t)
(:dst-access-mask :type access-flags :optional t)
(:dependency-flags :type dependency-flags :optional t)
))
(setf (gethash :subresource-layout *structs-plist-hash*) '(
(:offset :type device-size)
(:size :type device-size)
(:row-pitch :type device-size)
(:array-pitch :type device-size)
(:depth-pitch :type device-size)
))
(setf (gethash :surface-capabilities-2-khr *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:surface-capabilities :type (:struct surface-capabilities-khr) )
))
(setf (gethash :surface-format-2-khr *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:surface-format :type (:struct surface-format-khr) )
))
(setf (gethash :swapchain-counter-create-info-ext *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:surface-counters :type surface-counter-flags-ext :optional t)
))
(setf (gethash :texture-l-o-d-gather-format-properties-amd *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:supports-texture-gather-l-o-d-bias-a-m-d :type bool32)
))
(setf (gethash :vertex-input-attribute-description *structs-plist-hash*) '(
(:location :type :uint32)
(:binding :type :uint32)
(:format :type format)
(:offset :type :uint32)
))
(setf (gethash :vi-surface-create-info-nn *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:flags :type vi-surface-create-flags-nn :optional t)
(:window :type (:pointer :void)  :opaque t)
))
(setf (gethash :viewport-swizzle-nv *structs-plist-hash*) '(
(:x :type viewport-coordinate-swizzle-nv)
(:y :type viewport-coordinate-swizzle-nv)
(:z :type viewport-coordinate-swizzle-nv)
(:w :type viewport-coordinate-swizzle-nv)
))
(setf (gethash :wayland-surface-create-info-khr *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:flags :type wayland-surface-create-flags-khr :optional t)
(:display :type (:pointer (:struct wl_display))  :opaque t)
(:surface :type (:pointer (:struct wl_surface))  :opaque t)
))
(setf (gethash :win32-keyed-mutex-acquire-release-info-nv *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:acquire-count :type :uint32 :optional t)
(:p-acquire-syncs :type (:pointer device-memory)  :opaque t)
(:p-acquire-keys :type (:pointer :uint64) )
(:p-acquire-timeout-milliseconds :type (:pointer :uint32) )
(:release-count :type :uint32 :optional t)
(:p-release-syncs :type (:pointer device-memory)  :opaque t)
(:p-release-keys :type (:pointer :uint64) )
))
(setf (gethash :write-descriptor-set *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:dst-set :type descriptor-set :opaque t)
(:dst-binding :type :uint32)
(:dst-array-element :type :uint32)
(:descriptor-count :type :uint32)
(:descriptor-type :type descriptor-type)
(:p-image-info :type (:pointer (:struct descriptor-image-info)) )
(:p-buffer-info :type (:pointer (:struct descriptor-buffer-info)) )
(:p-texel-buffer-view :type (:pointer buffer-view)  :opaque t)
))
(setf (gethash :xcb-surface-create-info-khr *structs-plist-hash*) '(
(:s-type :type structure-type)
(:p-next :type (:pointer :void)  :opaque t)
(:flags :type xcb-surface-create-flags-khr :optional t)
(:connection :type (:pointer xcb_connection_t)  :opaque t)
(:window :type xcb_window_t)
))