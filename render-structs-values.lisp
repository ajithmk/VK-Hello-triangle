(in-package #:pg3)

(defparameter *render-pass-info-value* '((:s-type (:render-pass-create-info)
					  :p-next ((null-pointer))
					  :flags (*flags*)
					  :attachment-count (1)
					  :p-attachments (((:flags (*flags*)
								  :format (:b8g8r8a8-unorm)
								  :samples (:1)
								  :load-op (:clear)
								  :store-op (:store)
								  :stencil-load-op (:dont-care)
								  :stencil-store-op (:dont-care)
								  :initial-layout (:undefined)
								  :final-layout (:present-src-khr)
								  )))
					  :subpass-count (1)
					  :p-subpasses (((:flags (*flags*)
								:pipeline-bind-point (:graphics)
								:input-attachment-count (0)
								:p-input-attachments (nil)
								:color-attachment-count (1)
								:p-color-attachments (((:attachment (0)
												   :layout (:color-attachment-optimal)
												   )))
								:p-resolve-attachments (nil)
								:p-depth-stencil-attachment (nil)
								:preserve-attachment-count (0)
								:p-preserve-attachments (nil)
								)))
					  :dependency-count (1)
					  :p-dependencies (((:src-subpass (4294967295)
									 :dst-subpass (0)
									 :src-access-mask (0)
									 :src-stage-mask ('(:color-attachment-output
											   ))
									 :dst-stage-mask ('(:color-attachment-output
											   ))
									 :dst-access-mask ('(:color-attachment-write
											    ))
							    
							   )))
					  )))
					  

(defparameter *pipeline-layout-value* '((:s-type (:pipeline-layout-create-info)
					 :set-layout-count (0)
					 :flags (*flags*)
					 :p-next ((null-pointer))
					 :p-set-layouts (((null-pointer)))
					 :push-constant-range-count (0)
					 :p-push-constant-ranges (nil)
					 )))

(defparameter *graphics-pipeline-value* ' ((:s-type (:graphics-pipeline-create-info)
					   :p-next ((null-pointer))
					   :flags (*flags*)
					   :stage-count (2)
					   :p-stages ((
			(:s-type (:pipeline-shader-stage-create-info)
			:p-next ((null-pointer))
			:flags (*flags*)
			:stage (:vertex)
			:module (*vertex-module*)
			:p-name ('(#\m #\a #\i #\n))
			:p-specialization-info (nil)))
			((:s-type (:pipeline-shader-stage-create-info)
			:p-next ((null-pointer))
			:flags (*flags*)
			:stage (:fragment)
			:module (*fragment-module*)
			:p-name ('(#\m #\a #\i #\n))
			:p-specialization-info (nil))
					 ))
	:p-vertex-input-state ((
							(:s-type (:pipeline-vertex-input-state-create-info)
							:p-next ((null-pointer))
							:flags (*flags*)
							:vertex-binding-description-count (1)
							:p-vertex-binding-descriptions (((:binding (*vertex-binding-point1*)
											 :stride (*stride1*)
											 :input-rate (:vertex)
											 )))
							:vertex-attribute-description-count (1)
							:p-vertex-attribute-descriptions (((:binding (*attribute-binding-point1*)
											   :location (*attribute-binding-location1*)
											   :format (*attribute-format1*)
											   :offset (*attribute-offset1*)
											   )))
							)))
	:p-input-assembly-state ((
							(:s-type (:pipeline-input-assembly-state-create-info)
							:p-next ((null-pointer))
							:flags (*flags*)
							:topology (:triangle-list)
							:primitive-restart-enable (nil))
							))
	:p-tessellation-state (nil)
	:p-viewport-state ((
						(:s-type (:pipeline-viewport-state-create-info)
						:p-next ((null-pointer))
						:flags (*flags*)
						:viewport-count (1)
						:p-viewports ((
										(:x (0.0f0)
										:y (0.0f0)
										:width ((coerce *width*
												'single-float))
										:height ((coerce *height*
												 'single-float))
										:min-depth (0.0f0)
										:max-depth (1.0f0))
										))
						:scissor-count (1)
						:p-scissors ((
										(:offset ((
													:x (0)
													:y (0)
													))
										 :extent ((
											   :width (*width*)
												  :height (*height*)
													)))
									))
						)))
	:p-rasterization-state ((
							(:s-type (:pipeline-rasterization-state-create-info)
							:p-next ((null-pointer))
							:flags (*flags*)
							:depth-clamp-enable (nil)
							:rasterizer-discard-enable (nil)
							:polygon-mode (:fill)
							:cull-mode (:back)
							:front-face (:clockwise)
							:depth-bias-enable (nil)
							:depth-bias-constant-factor (0.0f0)
							:depth-bias-clamp (0.0f0)
							:depth-bias-slope-factor (0.0f0)
							:line-width (1.0f0)
							)))
	:p-multisample-state  ((
							(:s-type (:pipeline-multisample-state-create-info)
							:p-next ((null-pointer))
							:flags (*flags*)
							:rasterization-samples (:1)
							:sample-shading-enable (nil)
							:min-sample-shading (0.0f0)
							:p-sample-mask ((null-pointer))
							:alpha-to-coverage-enable ((null-pointer))
							:alpha-to-one-enable (nil)
							)))
	:p-depth-stencil-state (nil)
	:p-color-blend-state ((
						(:s-type (:pipeline-color-blend-state-create-info)
						:p-next ((null-pointer))
						:flags (*flags*)
						:logic-op-enable (nil)
						:logic-op (:copy)
						:attachment-count (1)
						:p-attachments ((
										(:blend-enable (nil)
										:src-color-blend-factor (:one)
										:dst-color-blend-factor (:zero)
										:color-blend-op (:add)
										:src-alpha-blend-factor (:one)
										:dst-alpha-blend-factor (:zero)
										:alpha-blend-op (:add)
										:color-write-mask ('(:r :g :b :a))
										)))
						:blend-constants ('(0.0f0 0.0f0 0.0f0 0.0f0) nil nil 4)
							)))
	:p-dynamic-state (nil)
	:layout (*pipeline-layout*)
	:render-pass (*render-pass*)
	:subpass (0)
	:base-pipeline-handle ((null-pointer))
	:base-pipeline-index (-1))
  ))